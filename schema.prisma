datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userDetails   UserDetails?
  logs          Log[]
  projects      Project[]
  favoriteLogs  LogFavorite[]
}

model UserDetails {
  id                String  @id @default(cuid())
  userId            String  @unique
  backgroundImage   String?
  username          String?  @unique
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Log {
  id        String   @id @default(cuid())
  createdBy String
  user    User     @relation(fields: [createdBy], references: [id]) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  filename String
  title      String
  notes   String?
  url     String
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
  size Int
  favorite LogFavorite[]
}

model LogFavorite {
  logId String
  favoritedBy String
  createdAt DateTime @default(now())  

  Log Log @relation(fields: [logId], references: [id])
  User User @relation(fields: [favoritedBy], references: [id])

  @@id([logId, favoritedBy])
}

model Project {
  id        String   @id @default(cuid())
  createdBy String
  user    User     @relation(fields: [createdBy], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  description String?
  photo     String?
  logs      Log[]
}